{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMA4CeA,EAzCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAsBA,OACI,sBAAMC,SAhBW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,4BAAQA,GAAR,CAAcP,OACjCC,EAAc,KAIlBH,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,QAMvC,SAEI,uBACIC,KAAK,OACLC,MAAOT,EACPU,SA1Bc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCPhBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,0FAE0EC,UAAUH,GAFpF,sBAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZrB,kBAgBdM,GAhBc,4CAAH,sDCATO,EAAe,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCmBDO,EAxBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEZ,ECFqB,SAACA,GAEzB,MAA0Bd,mBAAS,CAE/BqB,KAAM,GACNa,SAAS,IAHb,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OAlBAC,qBAAW,WAEPxB,EAAQC,GACPwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACpB,IAEJ0B,YAAW,WACPJ,EAAS,CACLf,KAAM,CAAC,EAAG,EAAG,EAAG,GAChBa,SAAS,MAEd,KAEIC,EDxB2BM,CAAa3B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEvB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEatBiB,EA1BM,WAGjB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAMA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACK4C,EAAWpB,KAAI,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YCVV8B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.35292181.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n\n    const [inputValue, setinputValue] = useState(''); // si esta vacio es undefined, si le agrego '', es un string vacio\n\n    const handleInputChange = (e) => {\n        // console.log(e.target.value)\n        setinputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n\n        e.preventDefault();\n        //console.log('Submit hecho')\n        if(inputValue.trim().length > 2) {\n            setCategories( cats => [...cats, inputValue])\n            setinputValue('');\n        }\n\n        // para llamar a setcategories y pasa las categorias\n        setCategories( cats => [inputValue, ...cats]);\n\n    }\n\n\n    return (\n        <form onSubmit={handleSubmit} >\n            {/* <h1>{inputValue}</h1> */}\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            >\n            </input>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","\n\n  export const getGifs = async (category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=CRDkfH94Cb9rwU2nfkV4xh2Kwndt78Mo&q=${encodeURI(category)}&limit=10`;\n\n    const resp = await fetch(url);\n\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}\n\n","import React from 'react'\n\nexport const GiftGridItem = ({title, url}) => {\n\n    // console.log({id, title, url});\n\n    return (\n        <div className=\"card animate__animated animate__bounce\" >\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GiftGridItem } from './GiftGridItem';\n\nconst GifGrid = ({ category }) => {\n\n       const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\" >{category}</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n\n            <div className=\"card-grid\" >\n                {\n                    images.map(img => (\n                        <GiftGridItem\n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid;\n\n\n\n\n\n\n\n\n\n//     const getGifs = async () => {\n\n//         const url = 'https://api.giphy.com/v1/gifs/search?api_key=CRDkfH94Cb9rwU2nfkV4xh2Kwndt78Mo&q=Rick and Marty&limit=10'\n\n//         const resp = await fetch(url)\n//         const { data } = await resp.json();\n\n//         const gifs = data.map(img => {\n//             return {\n//                 id: img.id,\n//                 title: img.title,\n//                 url: img.images?.downsized_medium.url\n//             }\n//         })\n\n//         console.log(gifs)\n//     }\n\n//     getGifs();\n//     const GifGrid = ({ category }) => {\n//         return (\n//             <div>\n//                 <h3>{category}</h3>\n//             </div>\n//         )\n//     }\n\n// }\n\n// export default GifGrid;","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\n// esto es un custom hooks\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs(category)\n        .then( imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            })\n        })\n    }, [category])\n\n    setTimeout(() => {\n        setState({\n            data: [1, 2, 3, 4, ],\n            loading: false\n        })\n    }, 3000)\n\n    return state; // es la data que es un arreglo daga: [], loading: true\n\n}","\nimport React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n\n    //const categories = ['one Punch', 'samurai x', 'Dragon Ball']\n    const [categories, setCategories] = useState(['one Punch'])\n\n    // const handleAdd = () => {\n    //     setcategories( cats => [...cats, 'HunterXHunter']);\n    // }\n\n    return (\n        <>\n            <h2>gifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            <ol>\n                {categories.map(category => \n                    <GifGrid \n                    key={category}\n                    category={category}\n                    />\n                )}\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\n\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}